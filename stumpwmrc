;; -*- lisp -*-

;; Code:

(in-package :stumpwm)

;; Contrib libraries -----------------------------------------------------------

(load "/home/tom/Sources/stumpwm-sabetts/contrib/cpu.lisp")
(load "/home/tom/Sources/stumpwm-sabetts/contrib/mem.lisp")

;; Initialization --------------------------------------------------------------

(set-prefix-key (kbd "C-i"))
(setf *mouse-focus-policy* :sloppy)  ;; options: :click, :ignore, :sloppy

(defparameter *startup-commands*
  '("setxkbmap -option ctrl:nocaps"
    "synclient TapButton1=0 TapButton2=0 TapButton3=0"
    "xsetroot -cursor_name left_ptr"
    "xrdb -merge ~/.Xdefaults"
    "xscreensaver -no-splash"
    "dropbox start"
    "nm-applet"))

(mapcar 'run-shell-command *startup-commands*)

;; Mode line -------------------------------------------------------------------

(setf *screen-mode-line-format*
      (list '(:eval (string-trim '(#\newline) (run-shell-command "date +'%a %b %d %H:%M'" t)))
            " | BAT: " '(:eval (string-trim '(#\space #\newline) (run-shell-command "acpi | cut -d ',' -f 2" t)))
            " %c %M|%w"))

(setf *mode-line-timeout* 1)

;; System management commands --------------------------------------------------

(defcommand disable-monitor () ()
  "Disable my 2nd monitor at work."
  (run-shell-command "monitor off"))

(defcommand enable-monitor () ()
  "Enable my 2nd monitor at work."
  (run-shell-command "monitor on"))

(defcommand lock-screen () ()
  "Lock the screen."
  (run-shell-command "xscreensaver-command -lock"))

(defcommand suspend () ()
  "Suspend the computer."
  (run-shell-command "sudo pm-suspend"))

(defcommand-alias sleep suspend)

;; Desktop wallpaper

(defcommand wallpaper-restore () ()
  "Restore the desktop wallpaper settings."
  (run-shell-command "nitrogen --restore"))

;; Sound commands

(defcommand mute () ()
  "Mute all sound."
  (run-shell-command "amixer set Master mute"))

(defcommand unmute () ()
  "Unmute the sound."
  (run-shell-command "amixer set Master unmute"))

(defcommand volume (level) ((:string "Level: "))
  "Set the volume to level."
  (run-shell-command (format nil "amixer set Master ~a" level)))

;; App shortcut commands -------------------------------------------------------

(defun run-web-app (name url)
  "Launch a stand-alone web app via Chrome."
  (let* ((instance (string-downcase name))
         (title (string-capitalize name))
         (profile-dir "/home/tom/.config/google-chrome/CustomProfiles")
         (profile-path (format nil "~a/~a" profile-dir instance))
         (command (format nil "google-chrome --app=~a --user-data-dir=~a --class=~a"
                          url profile-path instance)))
    (run-or-raise command `(:class ,instance))))

(defcommand aurora () ()
  "Start or switch to Firefox Aurora."
  (run-or-raise "aurora" '(:class "Firefox" :title "Aurora")))

(defcommand chrome () ()
  "Start or switch to Chrome."
  (run-or-raise "google-chrome" '(:class "Google-chrome")))

(defcommand conkeror () ()
  "Start or switch to Conkeror."
  (run-or-raise "conkeror" '(:class "conkeror")))

(defcommand firefox () ()
  "Start or switch to Firefox."
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand focus-at-will () ()
  "Start or switch to the focus@will web app."
  (run-web-app "focus-at-will" "https://focusatwill.com"))

(defcommand google-music () ()
  "Start or switch to Google Music web app."
  (run-web-app "google-music" "http://play.google.com/music/listen"))

(defcommand luakit () ()
  "Start or switch to luakit."
  (run-or-raise "luakit" '(:class "luakit")))

(defcommand pandora () ()
  "Start or switch to Pandora."
  (run-web-app "pandora" "http://www.pandora.com"))

(defcommand rdio () ()
  "Start or switch to Rdio."
  (run-web-app "rdio" "http://rdio.com"))

(defcommand sublime () ()
  "Start or switch to Sublime."
  (run-or-raise "sublime" '(:class "sublime")))

(defcommand terminal () ()
  "Start a new terminal."
  (run-shell-command "urxvtcd"))

(defcommand workflowy () ()
  "Start or switch to WorkFlowy."
  (run-web-app "workflowy" "https://workflowy.com"))

(defcommand dmenu-launcher () ()
  "Use dmenu to launch an application."
  (run-shell-command "dmenu_run"))

;; Window management ----------------------------------------------------------

(defcommand hsplit-third () ()
  "Split the current frame to 2/3 of the screen, stacked horizontally."
  (split-frame (current-group) :column 2/3))

(defcommand vsplit-third () ()
  "Split the current frame to 2/3 of the screen, stacked vertically."
  (split-frame (current-group) :row 2/3))

(defun echo-urgent-window (target)
  (message-no-timeout "~a has an message for you." (window-title target)))

(add-hook *urgent-window-hook* 'echo-urgent-window)

;; Pomodoro --------------------------------------------------------------------

(defcommand pomodoro-start () ()
  "Start a new pomodoro timer."
  (run-shell-command "emacsclient --eval '(pomodoro-start)'"))

(defcommand pomodoro-start-short-break () ()
  "Start a new short break timer."
  (run-shell-command "emacsclient --eval '(pomodoro-start-short-break)'"))

(defcommand pomodoro-start-long-break () ()
  "Start a new long break timer."
  (run-shell-command "emacsclient --eval '(pomodoro-start-long-break)'"))

;; Keyboard bindings -----------------------------------------------------------

(defparameter *app-launch-bindings*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "@") "focus-at-will")
    (define-key m (kbd "a") "aurora")
    (define-key m (kbd "c") "chrome")
    (define-key m (kbd "f") "firefox")
    (define-key m (kbd "k") "conkeror")
    (define-key m (kbd "m") "google-music")
    (define-key m (kbd "p") "pandora")
    (define-key m (kbd "r") "rdio")
    (define-key m (kbd "s") "sublime")
    (define-key m (kbd "t") "terminal")
    (define-key m (kbd "w") "workflowy")
    m))

(define-key *root-map* (kbd "l") '*app-launch-bindings*)

;; Volume keys

(defvar *key-codes*
  '((160 . "XF86AudioMute")
    (174 . "XF86AudioLowerVolume")
    (176 . "XF86AudioRaiseVolume")))

(mapcar (lambda (pair)
	  (let* ((keycode (car pair))
		 (keysym  (cdr pair))
		 (format-dest nil)
		 (format-dest (make-array 5 :fill-pointer 0 :adjustable t :element-type 'character)))
	    (format format-dest "xmodmap -e 'keycode ~d = ~a'" keycode keysym)
	    (run-shell-command format-dest)
	  format-dest))
	*key-codes*)

(define-key *top-map* (kbd "XF86AudioMute") "volume toggle")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volume 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume 5%+")

(define-key *top-map* (kbd "XF86AudioStop") (lambda () (spawn "mpc pause")))
(define-key *top-map* (kbd "XF86AudioPlay") (run-shell-command "mpc toggle"))

(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")

(define-key *root-map* (kbd "d") "dmenu-launcher")
(define-key *top-map* (kbd "s-d") "dmenu-launcher")

;; Slime ----------------------------------------------------------------------

;; Load swank.
;; *prefix-key* ; swank will kick this off
(load "/home/tom/Sources/slime/swank-loader.lisp")
(swank-loader:init)

(defcommand swank () ()
  (setf stumpwm:*top-level-error-action* :break)
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
	       "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
